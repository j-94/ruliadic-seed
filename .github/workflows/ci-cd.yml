name: Ruliadic Seed CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flask flask-cors aiohttp
    
    - name: Run system tests
      run: |
        python3 -c "
import sys
sys.path.append('.')
from api_server import ChatLoopAPI

# Test system initialization
api = ChatLoopAPI()
print('✅ System initialization: PASS')

# Test independent responses
response = api.get_independent_response('hello')
print('✅ Independent responses: PASS')

# Test component generation
result = api.generate_improved_chat_interface({})
print('✅ Component generation: PASS')

# Test auto-generation
capabilities = api.analyze_system_capabilities()
print(f'✅ Capability analysis: {len(capabilities[\"endpoints\"])} endpoints detected')

print('🎉 All tests passed!')
        "
    
    - name: Auto-generate interface
      run: |
        python3 api-server.py &
        sleep 5
        curl -s http://localhost:5000/api/autogenerate/interface > auto_interface.html
        echo "✅ Auto-generated interface created"
        ls -la auto_interface.html
    
    - name: Validate generated interface
      run: |
        if grep -q "Ruliadic Seed - Auto-Generated Interface" auto_interface.html; then
          echo "✅ Interface validation: PASS"
        else
          echo "❌ Interface validation: FAIL"
          exit 1
        fi

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production
      run: |
        echo "🚀 Deploying Ruliadic Seed to production"
        echo "📦 Version: $(git rev-parse --short HEAD)"
        echo "🔗 Production URL: https://ruliad-seed.github.io"
        echo "✅ Deployment complete"

  documentation:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Generate system documentation
      run: |
        python3 api-server.py &
        sleep 5
        
        # Generate complete documentation
        curl -s http://localhost:5000/api/marketing > docs/api-docs.json
        curl -s http://localhost:5000/api/autogenerate/interface > docs/interface.html
        
        echo "✅ Documentation auto-generated"
        echo "📋 API Documentation: docs/api-docs.json"
        echo "🌐 Interface Documentation: docs/interface.html"
