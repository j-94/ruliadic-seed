#!/bin/bash
# Secret Management System - API key obfuscation and SSH agent integration
# Usage: ./bin/secret [set|get|rotate|ssh-setup|github-setup]

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
SECRETS_DIR="$SCRIPT_DIR/.secrets"
VAULT_FILE="$SECRETS_DIR/vault.enc"
SSH_DIR="$HOME/.ssh"
LOG_FILE="$SCRIPT_DIR/deliverables/secret.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Default passphrase for encryption (should be changed)
DEFAULT_PASSPHRASE="GL2-pass-$(date +%Y%m%d)"

# Utility functions
log() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')] $1${NC}" | tee -a "$LOG_FILE"
}

success() {
    echo -e "${GREEN}✅ $1${NC}" | tee -a "$LOG_FILE"
}

warning() {
    echo -e "${YELLOW}⚠️  $1${NC}" | tee -a "$LOG_FILE"
}

error() {
    echo -e "${RED}❌ $1${NC}" | tee -a "$LOG_FILE"
    exit 1
}

# Create secrets directory
setup_secrets_dir() {
    mkdir -p "$SECRETS_DIR"
    chmod 700 "$SECRETS_DIR"

    # Create .gitignore for secrets
    if [[ ! -f "$SECRETS_DIR/.gitignore" ]]; then
        echo "*" > "$SECRETS_DIR/.gitignore"
        success "Created secrets .gitignore"
    fi
}

# Encrypt data using OpenSSL
encrypt_data() {
    local data="$1"
    local passphrase="${2:-$DEFAULT_PASSPHRASE}"

    echo "$data" | openssl enc -aes-256-cbc -salt -pbkdf2 -pass pass:"$passphrase" -base64
}

# Decrypt data using OpenSSL
decrypt_data() {
    local encrypted_data="$1"
    local passphrase="${2:-$DEFAULT_PASSPHRASE}"

    echo "$encrypted_data" | openssl enc -aes-256-cbc -d -salt -pbkdf2 -pass pass:"$passphrase" -base64 2>/dev/null || echo ""
}

# Set API key with obfuscation
set_openrouter_key() {
    local key="$1"

    if [[ -z "$key" ]]; then
        echo -n "Enter OpenRouter API key: "
        read -s key
        echo ""
    fi

    if [[ -z "$key" ]]; then
        error "API key cannot be empty"
    fi

    setup_secrets_dir

    # Create key metadata
    local key_metadata
    key_metadata=$(cat << EOF
{
  "provider": "openrouter",
  "created": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "key_prefix": "$(echo "$key" | cut -c1-8)...",
  "environment": "development"
}
EOF
    )

    # Encrypt and store
    local encrypted_key
    encrypted_key=$(encrypt_data "$key")

    local encrypted_metadata
    encrypted_metadata=$(encrypt_data "$key_metadata")

    cat > "$VAULT_FILE" << EOF
OPENROUTER_KEY=$encrypted_key
OPENROUTER_METADATA=$encrypted_metadata
EOF

    success "OpenRouter API key encrypted and stored"
    log "API key configured for OpenRouter provider"
}

# Get API key (decrypt)
get_openrouter_key() {
    if [[ ! -f "$VAULT_FILE" ]]; then
        error "No encrypted vault found. Run: ./bin/secret set-openrouter"
    fi

    # Extract encrypted key
    local encrypted_key
    encrypted_key=$(grep "^OPENROUTER_KEY=" "$VAULT_FILE" | cut -d'=' -f2-)

    if [[ -z "$encrypted_key" ]]; then
        error "No OpenRouter key found in vault"
    fi

    # Decrypt key
    local decrypted_key
    decrypted_key=$(decrypt_data "$encrypted_key")

    if [[ -z "$decrypted_key" ]]; then
        error "Failed to decrypt API key. Check passphrase."
    fi

    echo "$decrypted_key"
}

# Rotate encryption passphrase
rotate_passphrase() {
    local old_passphrase="$1"
    local new_passphrase="$2"

    if [[ -z "$old_passphrase" ]]; then
        echo -n "Enter current passphrase: "
        read -s old_passphrase
        echo ""
    fi

    if [[ -z "$new_passphrase" ]]; then
        echo -n "Enter new passphrase: "
        read -s new_passphrase
        echo ""
    fi

    if [[ -z "$old_passphrase" || -z "$new_passphrase" ]]; then
        error "Both old and new passphrases are required"
    fi

    if [[ ! -f "$VAULT_FILE" ]]; then
        error "No vault file found to rotate"
    fi

    log "Rotating encryption passphrase..."

    # Read current vault
    local current_vault
    current_vault=$(cat "$VAULT_FILE")

    # Decrypt with old passphrase and re-encrypt with new
    local new_vault=""
    while IFS='=' read -r key value; do
        if [[ -n "$value" ]]; then
            local decrypted_value
            decrypted_value=$(decrypt_data "$value" "$old_passphrase")

            if [[ -n "$decrypted_value" ]]; then
                local reencrypted_value
                reencrypted_value=$(encrypt_data "$decrypted_value" "$new_passphrase")
                new_vault="${new_vault}${key}=${reencrypted_value}\n"
            else
                error "Failed to decrypt existing secrets with old passphrase"
            fi
        fi
    done <<< "$current_vault"

    # Write new vault
    echo -e "$new_vault" > "$VAULT_FILE"

    success "Passphrase rotated successfully"
    log "All encrypted secrets updated with new passphrase"
}

# Setup SSH agent and keys
setup_ssh_agent() {
    log "Setting up SSH agent integration..."

    # Check if SSH agent is running
    if ! pgrep -x "ssh-agent" > /dev/null; then
        warning "SSH agent not running. Starting new agent..."

        # Start SSH agent
        eval "$(ssh-agent -s)" > /dev/null 2>&1

        # Export SSH_AUTH_SOCK for this session
        export SSH_AUTH_SOCK
        export SSH_AGENT_PID

        success "SSH agent started"
    else
        success "SSH agent already running"
    fi

    # Check for SSH keys
    local ssh_keys=()
    while IFS= read -r -d '' key_file; do
        ssh_keys+=("$key_file")
    done < <(find "$SSH_DIR" -name "id_*" -type f ! -name "*.pub" -print0 2>/dev/null)

    if [[ ${#ssh_keys[@]} -eq 0 ]]; then
        warning "No SSH keys found in $SSH_DIR"
        echo "Would you like to generate a new SSH key? (y/n)"
        read -r generate_key

        if [[ "$generate_key" == "y" ]]; then
            generate_ssh_key
        fi
    else
        success "Found ${#ssh_keys[@]} SSH key(s)"

        # Try to add keys to agent
        for key_file in "${ssh_keys[@]}"; do
            if ssh-add -l | grep -q "$(ssh-keygen -lf "$key_file" | cut -d' ' -f2)"; then
                success "Key already in agent: $(basename "$key_file")"
            else
                if ssh-add "$key_file" 2>/dev/null; then
                    success "Added key to agent: $(basename "$key_file")"
                else
                    warning "Failed to add key: $(basename "$key_file")"
                fi
            fi
        done
    fi
}

# Generate new SSH key
generate_ssh_key() {
    local key_type="${1:-ed25519}"
    local key_comment="${2:-one-engine-$(date +%Y%m%d)}"

    log "Generating new SSH key..."

    # Generate key
    ssh-keygen -t "$key_type" -C "$key_comment" -f "$SSH_DIR/id_$key_type" -N ""

    # Set proper permissions
    chmod 600 "$SSH_DIR/id_$key_type"
    chmod 644 "$SSH_DIR/id_$key_type.pub"

    # Add to SSH agent
    ssh-add "$SSH_DIR/id_$key_type"

    success "Generated new SSH key: id_$key_type"
    log "SSH key generated with type $key_type"

    # Display public key for GitHub/GitLab setup
    echo ""
    echo -e "${CYAN}Add this public key to GitHub/GitLab:${NC}"
    cat "$SSH_DIR/id_$key_type.pub"
}

# Setup GitHub integration
setup_github() {
    log "Setting up GitHub integration..."

    # Check if GitHub CLI is installed
    if ! command -v gh &> /dev/null; then
        warning "GitHub CLI (gh) not found. Install it for better integration."
        echo "Visit: https://cli.github.com/"
    fi

    # Test GitHub connectivity
    if ssh -T git@github.com 2>&1 | grep -q "success"; then
        success "GitHub SSH connectivity verified"
    else
        warning "GitHub SSH connectivity failed"
        echo "Please add your SSH public key to GitHub:"
        echo "1. Copy the public key from above"
        echo "2. Go to GitHub Settings > SSH and GPG keys"
        echo "3. Click 'New SSH key'"
        echo "4. Paste the key and save"
    fi

    # Configure git if not already done
    if ! git config --global user.name > /dev/null 2>&1; then
        echo -n "Enter your GitHub username: "
        read -r github_username

        echo -n "Enter your GitHub email: "
        read -r github_email

        git config --global user.name "$github_username"
        git config --global user.email "$github_email"

        success "Git configuration updated"
    else
        success "Git already configured"
    fi
}

# Setup GitLab integration
setup_gitlab() {
    log "Setting up GitLab integration..."

    # Test GitLab connectivity
    if ssh -T git@gitlab.com 2>&1 | grep -q "Welcome"; then
        success "GitLab SSH connectivity verified"
    else
        warning "GitLab SSH connectivity failed"
        echo "Please add your SSH public key to GitLab:"
        echo "1. Copy the public key from above"
        echo "2. Go to GitLab Preferences > SSH Keys"
        echo "3. Paste the key and save"
    fi
}

# Show current secret status
show_status() {
    echo -e "${CYAN}Secret Management Status${NC}"
    echo "======================="

    # Check vault
    if [[ -f "$VAULT_FILE" ]]; then
        success "Encrypted vault exists"

        # Show metadata if available
        local encrypted_metadata
        encrypted_metadata=$(grep "^OPENROUTER_METADATA=" "$VAULT_FILE" | cut -d'=' -f2- || echo "")

        if [[ -n "$encrypted_metadata" ]]; then
            local metadata
            metadata=$(decrypt_data "$encrypted_metadata" 2>/dev/null || echo "")

            if [[ -n "$metadata" ]]; then
                echo "API Keys:"
                echo "  🔑 OpenRouter: $(echo "$metadata" | grep -o '"key_prefix":"[^"]*"' | cut -d'"' -f4)***"
            fi
        fi
    else
        warning "No encrypted vault found"
    fi

    # Check SSH agent
    if pgrep -x "ssh-agent" > /dev/null; then
        success "SSH agent running"

        # Show loaded keys
        local key_count
        key_count=$(ssh-add -l 2>/dev/null | wc -l)
        echo "SSH Keys loaded: $key_count"
    else
        warning "SSH agent not running"
    fi

    # Check SSH keys
    local ssh_key_count
    ssh_key_count=$(find "$SSH_DIR" -name "id_*" -type f ! -name "*.pub" 2>/dev/null | wc -l)
    echo "SSH Keys found: $ssh_key_count"

    # Show recommendations
    echo ""
    echo "Recommendations:"
    if [[ ! -f "$VAULT_FILE" ]]; then
        echo "  🔑 Set API key: ./bin/secret set-openrouter"
    fi
    if ! pgrep -x "ssh-agent" > /dev/null; then
        echo "  🔐 Setup SSH: ./bin/secret ssh-setup"
    fi
    if [[ -f "$VAULT_FILE" ]]; then
        echo "  🔄 Rotate passphrase: ./bin/secret rotate"
    fi
}

# Main command dispatcher
main() {
    # Create log file
    mkdir -p "$(dirname "$LOG_FILE")"
    touch "$LOG_FILE"

    local cmd="${1:-status}"

    case "$cmd" in
        "set-openrouter")
            shift
            set_openrouter_key "${1:-}"
            ;;
        "get-openrouter")
            get_openrouter_key
            ;;
        "rotate")
            shift
            rotate_passphrase "${1:-}" "${2:-}"
            ;;
        "ssh-setup")
            setup_ssh_agent
            ;;
        "ssh-generate")
            shift
            generate_ssh_key "${1:-ed25519}" "${2:-}"
            ;;
        "github-setup")
            setup_ssh_agent
            setup_github
            ;;
        "gitlab-setup")
            setup_ssh_agent
            setup_gitlab
            ;;
        "status")
            show_status
            ;;
        "help"|"-h"|"--help")
            cat << EOF
Secret Management System - API key obfuscation and SSH agent integration

USAGE:
    $0 [COMMAND] [ARGUMENTS]

COMMANDS:
    set-openrouter [key]    Set/encrypt OpenRouter API key
    get-openrouter          Get/decrypt OpenRouter API key
    rotate [old] [new]      Rotate encryption passphrase
    ssh-setup               Setup SSH agent and load keys
    ssh-generate [type]     Generate new SSH key (default: ed25519)
    github-setup            Setup GitHub integration
    gitlab-setup            Setup GitLab integration
    status                  Show current secret status

EXAMPLES:
    $0 set-openrouter sk-or-v1-...     # Set API key
    $0 get-openrouter                    # Get API key for use
    $0 rotate old_pass new_pass          # Rotate encryption
    $0 ssh-setup                         # Setup SSH agent
    $0 ssh-generate ed25519              # Generate new key
    $0 github-setup                      # Setup GitHub integration

SECURITY FEATURES:
    - AES-256-CBC encryption for API keys
    - Passphrase-based key derivation (PBKDF2)
    - SSH agent integration for git operations
    - Automatic key loading and management
    - Secure vault with proper permissions

FILES:
    .secrets/vault.enc      # Encrypted API keys
    ~/.ssh/                 # SSH keys and config
    deliverables/secret.log # Operation log

INTEGRATION:
    - Works with One Engine and Meta² Engine
    - Supports GitHub/GitLab for PR automation
    - Compatible with existing seed configuration
    - Automatic key injection for engine startup

TROUBLESHOOTING:
    - Check permissions: chmod 700 .secrets/
    - Verify passphrase for decryption
    - Ensure SSH agent is running: eval \$(ssh-agent)
    - Test connectivity: ssh -T git@github.com
EOF
            ;;
        *)
            error "Unknown command: $cmd. Use 'help' for usage information."
            ;;
    esac
}

# Run main function with all arguments
main "$@"